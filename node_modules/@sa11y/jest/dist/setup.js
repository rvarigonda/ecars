"use strict";
/*
 * Copyright (c) 2020, salesforce.com, inc.
 * All rights reserved.
 * SPDX-License-Identifier: BSD-3-Clause
 * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/BSD-3-Clause
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.adaptA11yConfig = exports.registerSa11yMatcher = exports.setup = exports.disabledRules = void 0;
const matcher_1 = require("./matcher");
const automatic_1 = require("./automatic");
const globals_1 = require("@jest/globals");
exports.disabledRules = [
    // Descendancy checks that would fail at unit/component level, but pass at page level
    'aria-required-children',
    'aria-required-parent',
    'dlitem',
    'definition-list',
    'list',
    'listitem',
    'landmark-one-main',
    // color-contrast doesn't work for JSDOM and might affect performance
    //  https://github.com/dequelabs/axe-core/issues/595
    //  https://github.com/dequelabs/axe-core/blob/develop/doc/examples/jsdom/test/a11y.js
    'color-contrast',
    // audio, video elements are stubbed out in JSDOM
    //  https://github.com/jsdom/jsdom/issues/2155
    'audio-caption',
    'video-caption',
];
/**
 * Default options for sa11y jest matcher
 */
const defaultSa11yOpts = {
    autoCheckOpts: {
        runAfterEach: false,
        cleanupAfterEach: false,
        consolidateResults: false,
    },
};
/**
 * Register Sa11y Jest API and automatic checks depending on {@link Sa11yOpts}
 * @param opts - {@link Sa11yOpts} to opt-in to automatic checks
 */
function setup(opts = defaultSa11yOpts) {
    registerSa11yMatcher();
    // Set defaults from env vars
    const autoCheckOpts = opts.autoCheckOpts;
    autoCheckOpts.runAfterEach || (autoCheckOpts.runAfterEach = !!process.env.SA11Y_AUTO);
    // Consolidate results if automatic checks is enabled
    autoCheckOpts.consolidateResults || (autoCheckOpts.consolidateResults = autoCheckOpts.runAfterEach);
    autoCheckOpts.cleanupAfterEach || (autoCheckOpts.cleanupAfterEach = !!process.env.SA11Y_CLEANUP);
    if (process.env.SA11Y_AUTO_FILTER?.trim().length)
        autoCheckOpts.filesFilter || (autoCheckOpts.filesFilter = process.env.SA11Y_AUTO_FILTER.split(','));
    (0, automatic_1.registerSa11yAutomaticChecks)(autoCheckOpts);
}
exports.setup = setup;
/**
 * Register accessibility helpers toBeAccessible as jest matchers
 */
function registerSa11yMatcher() {
    if (globals_1.expect !== undefined) {
        globals_1.expect.extend({ toBeAccessible: matcher_1.toBeAccessible });
    }
    else {
        throw new Error("Unable to find Jest's expect function." +
            '\nPlease check your Jest installation and that you have added @sa11y/jest correctly to your jest configuration.' +
            '\nSee https://github.com/salesforce/sa11y/tree/master/packages/jest#readme for help.');
    }
}
exports.registerSa11yMatcher = registerSa11yMatcher;
/**
 * Customize sa11y preset rules specific to JSDOM
 */
function adaptA11yConfig(config, filterRules = exports.disabledRules) {
    // TODO (refactor): Move into preset-rules pkg as a generic rules filter util
    const adaptedConfig = JSON.parse(JSON.stringify(config));
    adaptedConfig.runOnly.values = config.runOnly.values.filter((rule) => !filterRules.includes(rule));
    return adaptedConfig;
}
exports.adaptA11yConfig = adaptA11yConfig;
//# sourceMappingURL=setup.js.map